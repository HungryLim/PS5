x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(xj))
xj_1<-xj
xj <-(fun(x))
xj_1<-xj
xj_1
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
xj_1
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/3*(xj_1)
t
xj_1
h <- (startandend[2] - startandend[1]) / n
t<-h/3*(xj_1)
t
h
sim<-sum(t)
sim
setClass(Class="Trapezoid",
representation = representation(
result = "numeric",
x="numeric",
y="numeric"
),
prototype = prototype(
result =  c(),
x= c(),
y= c())
)
setClass(Class="Simpson",
representation = representation(
result = "numeric",
x="numeric",
y="numeric"
),
prototype = prototype(
result =  c(),
x= c(),
y= c())
)
#' @export
setMethod("initialize", "Trapezoid",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @export
setMethod("initialize", "Simpson",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#' @rdname integrateIt
#' @export
setGeneric("integrateIt",
function(object="Trapezoid")  {
standardGeneric("integrateIt")
}
)
#' @rdname integrateIt
#' @export
setGeneric("integrateIt",
function(object="Simpson")  {
standardGeneric("integrateIt")
}
)
#' @export
setMethod("integrateIt", "Trapezoid",
function(object){
return(object@Trapezoid)
}
)
#' @export
setMethod("integrateIt", "Simpson",
function(object){
return(object@Simpson)
}
)
setGeneric(name="tolTest",
def=function(fun, tolerance,rule, start,correct, ...)
{standardGeneric("tolTest")
startandend<-c(0,10)}
)
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
#startandend<-c(0,10)
correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
)
tolTest()
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
#startandend<-c(0,10)
correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
)
tolTest()
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
#startandend<-c(0,10)
correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
}
tolTest()
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
#startandend<-c(0,10)
correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
}
tolTest()
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
#startandend<-c(0,10)
correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
}
)
tolTest(function(x){2*x},tolerance=0.5,rule="Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
startandend<-c(0,10)
#correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
}
)
tolTest(function(x){2*x},tolerance=0.5,rule="Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
tolTest(fun=function(x){2*x},tolerance=0.5,rule="Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
tolTest(fun= function(x){2*x},tolerance=0.5,rule="Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
fun= function(x){2*x}
tolTest(fun= function(x){2*x},tolerance=0.5,rule="Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
tolTest(fun= function(x){2*x},tolerance=0.5,"Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
setGeneric(name="tolTest",
def=function(fun, tolerance,rule, start,correct, ...)
{standardGeneric("tolTest")
startandend<-c(5,7)}
)
setMethod(f="tolTest",
definition=function(fun, tolerance,rule, start,correct, ...){
startandend<-c(0,10)
#correct<-integrate(fun, startandend[1],startandend[2])
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
if (rule=="Simpson"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2] - startandend[1]) / n
x<- seq.int(startandend[1], startandend[2], length.out = n + 1)
xj <-(fun(x))
xj_1<-xj
for (i in 1:length(xj)){
if((i %% 2) == 0){
xj_1[i]<-xj[i]*4}
else {xj_1[i]<-xj[i]*2}}
xj_1[1]<-xj[1]
xj_1[length(xj)]<-xj[length(xj)]
t<-h/3*(xj_1)
sim<-sum(t)
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
}
)
tolTest(function(x){2*x},tolerance=0.5,"Simpson",start=3,correct=integrate(fun, lower=5,upper=7))
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
start
start=3
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
startandend<-c(0,10)
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
correct=integrate(fun, lower=5,upper=7)
if (rule=="Trap"){
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
}
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
tolerance=0.1
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
return(n)
}
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
sim
