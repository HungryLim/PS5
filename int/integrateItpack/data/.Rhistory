return(object@Simpson)
}
)
setGeneric(name="integrateIt",
def=function(x,y,startandend,Rule, ...)
{standardGeneric("integrateIt")}
)
x<-c(0:10)
y<-seq(0,20,2)
x<-matrix(x,nrow=1)
x
y<-matrix(y,nrow=1)
setMethod(f="integrateIt",
definition=function(x,y,startandend=c(a,b),Rule, ...){
x<-matrix(x,nrow=1)
y<-matrix(y,nrow=1)
if (Rule=="Trap"){
y_1<-y*2
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
y_1
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/2*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Trapezoid", result=sum(t), x = x, y = y))
}
if (Rule=="Simpson"){
y_1<-y
for (i in 1:ncol(y)){
if((i %% 2) == 0){
y_1[i]<-y[i]*4}
else {y_1[i]<-y[i]*2}}
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1])/nrow(x)
t<-h/3*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Simpson", result=sum(t), x = x, y = y))}
}
)
integrateIt(x,y,startandend=c(0,10),Rule="Simpson")
integrateIt(x,y,startandend=c(0,10),Rule="Trap")
setGeneric(name="integrateIt",
def=function(x,y,startandend,Rule, ...)
{standardGeneric("integrateIt")}
)
x<-c(0:10)
y<-seq(0,20,2)
setMethod(f="integrateIt",
definition=function(x,y,startandend=c(a,b),Rule, ...){
x<-matrix(x,nrow=1)
y<-matrix(y,nrow=1)
if (Rule=="Trap"){
y_1<-y*2
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
y_1
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/2*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Trapezoid", result=sum(t), x = x, y = y))
}
if (Rule=="Simpson"){
y_1<-y
for (i in 1:ncol(y)){
if((i %% 2) == 0){
y_1[i]<-y[i]*4}
else {y_1[i]<-y[i]*2}}
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1])/ncol(x)
t<-h/3*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Simpson", result=sum(t), x = x, y = y))}
}
)
integrateIt(x,y,startandend=c(0,10),Rule="Simpson")
integrateIt(x,y,startandend=c(0,10),Rule="Trap")
x<-c(0:10)
y<-seq(0,20,2)
setMethod(f="integrateIt",
definition=function(x,y,startandend=c(a,b),Rule, ...){
x<-matrix(x,nrow=1)
y<-matrix(y,nrow=1)
if (Rule=="Trap"){
y_1<-y*2
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/2*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Trapezoid", result=sum(t), x = x, y = y))
}
if (Rule=="Simpson"){
y_1<-y
for (i in 1:ncol(y)){
if((i %% 2) == 0){
y_1[i]<-y[i]*4}
else {y_1[i]<-y[i]*2}}
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1])/ncol(x)
t<-h/3*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Simpson", result=sum(t), x = x, y = y))}
}
)
integrateIt(x,y,startandend=c(0,10),Rule="Simpson")
x
y
x<-matrix(x,nrow=1)
y<-matrix(y,nrow=1)
y_1<-y
for (i in 1:ncol(y)){
if((i %% 2) == 0){
y_1[i]<-y[i]*4}
else {y_1[i]<-y[i]*2}}
setMethod(f="integrateIt",
definition=function(x,y,startandend=c(a,b),Rule, ...){
x<-matrix(x,nrow=1)
y<-matrix(y,nrow=1)
if (Rule=="Trap"){
y_1<-y*2
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/2*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Trapezoid", result=sum(t), x = x, y = y))
}
if (Rule=="Simpson"){
y_1<-y
for (i in 1:ncol(y)){
if((i %% 2) == 0){
y_1[i]<-y[i]*4}
else {y_1[i]<-y[i]*2}}
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/3*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(new("Simpson", result=sum(t), x = x, y = y))}
}
)
integrateIt(x,y,startandend=c(0,10),Rule="Simpson")
integrateIt(x,y,startandend=c(0,10),Rule="Trap")
setGeneric(name="print",
def=function(x,y,startandend,Rule, ...)
{standardGeneric("print")}
)
setMethod(f="print",
definition=function(x,y,startandend=c(a,b),Rule, ...){
x<-matrix(x,nrow=1)
y<-matrix(y,nrow=1)
if (Rule=="Trap"){
y_1<-y*2
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/2*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(result=sum(t))
}
if (Rule=="Simpson"){
y_1<-y
for (i in 1:ncol(y)){
if((i %% 2) == 0){
y_1[i]<-y[i]*4}
else {y_1[i]<-y[i]*2}}
y_1[1]<-y[1]
y_1[ncol(y)]<-y[ncol(y)]
h<-(startandend[2]-startandend[1]+1)/ncol(x)
t<-h/3*(y_1)
x<-as.vector(x)
y<-as.vector(y)
return(result=sum(t))}
}
)
print(x,y,startandend=c(2,5),Rule="Simpson")
print(x,y,startandend=c(0,10),Rule="Simpson")
library(faraway)
x<-cbind(prostate$svi,prostate$lweight)
x<-cbind(1,x)
y<-prostate$lpsa
m<-lm(lpsa~svi+lweight,data=prostate)
beta<-as.matrix(m$coefficients)
ms<-summary(m)
se2 <- (t(y) %*% y - t(beta) %*% t(x) %*% y) / (nrow(x)-2-1)
L<-matrix(c(0,1,-2),nrow=1)
c<-0
Fstat<-(t(L%*%beta - c)%*%solve(L%*%solve(crossprod(x))%*%t(L))%*%(L%*%beta - c))/2*se2
criticalv<-qf(.95, df1=2, df2=95)
Fstat>criticalv
criticalv<-qf(.95, df1=2, df2=95)
criticalv
library(faraway)
x<-cbind(prostate$svi,prostate$lweight)
x<-cbind(1,x)
y<-prostate$lpsa
m<-lm(lpsa~svi+lweight,data=prostate)
beta<-as.matrix(m$coefficients)
ms<-summary(m)
se2 <- (t(y) %*% y - t(beta) %*% t(x) %*% y) / (nrow(x)-2-1)
L<-matrix(c(0,1,-2),nrow=1)
c<-0
Fstat<-(t(L%*%beta - c)%*%solve(L%*%solve(crossprod(x))%*%t(L))%*%(L%*%beta - c))/2*se2
Fstat
ms
criticalv<-qf(.95, df1=2, df2=95)
Fstat>criticalv
criticalv
fun<-function(x){2*x}
fun(1)
fun<-function(x){2*x}
startandend=c(1,10)
j <- 1:10 - 1
j
n=10
h <- (startandend[2]-startandend[1]) / n
h
j <- 1:n - 1
xj <- a + j * h
xj <- startandend[1] + j * h
xj
integrate(dnorm, -1.96, 1.96)
integrate(dnorm, -1.96, 1.96,abs.tol = 0.01)
integrate(dnorm, -1.96, 1.96,abs.error = 0.01)
integrate(dnorm, -1.96, 1.96,abs.tol = 0.01)
integrate(dnorm, -1.96, 1.96,abs.tol = 1)
integrate(dnorm, -1.96, 1.96, rel.tol  = 1)
integrate(dnorm, -1.96, 1.96, rel.tol  = 0.01)
startandend=c(1,10)
n=10
fun<-function(x){2*x}
correct<-integrate(fun, startandend[1],startandend[2])
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(a) + 2 * sum(f(xj)) + f(b))
l_tol<-correct-tolerance
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
start=3
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
y_1<-y*2
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
f<-function(x){2*x}
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
tolerance=0.1
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-tolerance
u_tol<-correct+tolerance
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct-as.numeric(tolerance)
u_tol<-correct+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
trap < u_tol & trap > l_tol
correct
l_tol<-correct-as.numeric(tolerance)
correct
class(correct)
correct
correct$abs.error
correct$value
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
trap
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
tolerance=1
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
i
n<-(start+i-1)
n
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
l_tol
u_tol
trap
i = 2
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
trap
correct$value
u_tol<-correct$value+as.numeric(tolerance)
if (trap < u_tol & trap > l_tol)
{}
source('~/.active-rstudio-document', echo=TRUE)
trap < u_tol & trap > l_tol
startandend=c(1,10)
n=10
start=3
tolerance=2
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
tolerance=5
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
# exit if the condition is met
if (trap < u_tol & trap > l_tol) break
}
i = 100
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
trap
l_tol
u_tol
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (f(startandend[1]) + 2 * sum(f(xj)) + f(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
u_tol
}
u_tol
correct<-integrate(fun, startandend[1],startandend[2])
correct
as.numeric(tolerance)
fun<-function(x){2*x}
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
n=10
start=3
tolerance=0.1
i = 1
repeat {
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
l_tol<-correct$value-as.numeric(tolerance)
u_tol<-correct$value+as.numeric(tolerance)
trap
}
n<-(start+i-1)
h <- (startandend[2]-startandend[1]) / n
j <- 1:n - 1
xj <- startandend[1] + j * h
trap <- (h / 2) * (fun(startandend[1]) + 2 * sum(fun(xj)) + fun(startandend[2]))
trap
correct$value
l_tol<-correct$value-as.numeric(tolerance)
l_tol
x<-c(1:10)
y<-c(2:11)
save.image("~/GitHub/Class/PS5/int/integrateItpack/data/exdata.RData")
setwd("C:/Users/dell/Documents/GitHub/Class/PS5/int/integrateItpack/data")
save(x,y, file = "exdata.rda")
